subprojects {
    apply plugin: 'java'
    apply plugin: 'findbugs'
    apply plugin: 'checkstyle'
    apply plugin: 'eclipse'
    apply plugin: 'jacoco'
    apply plugin: 'maven'

    // need utf-8 to get text with non-standard chars e.g. curly apostrophes used correctly 
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    // This is a work around for an outstanding issue getting eclipse plugin to honour encoding options for java
    // https://issues.gradle.org/browse/GRADLE-2274
    eclipse {
        File f = file('.settings')

        if (f.exists()) {
            f = file('.settings/org.eclipse.core.resources.prefs')
            f.write('eclipse.preferences.version=1\n')
            f.append('encoding/<project>=UTF-8')
        }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    
    repositories {
        // Only required while webdriver project waiting for htmlelements to be published
        maven { url "https://jitpack.io" }
        mavenCentral()
    }

    configurations {
        javaDoclet
    }

    // A number of libraries we are using include selenium as a dependecy, use this to check
    // gradlew dependencyInsight  --dependency org.seleniumhq.selenium:selenium-java --configuration testCompile
    // Enable this to confirm:
    /*
    configurations.all {
        resolutionStrategy {
            // fail eagerly on version conflict (includes transitive dependencies)
            // e.g. multiple different versions of the same dependency (group and name are equal)
            failOnVersionConflict()
        }
    }
    */
    
    dependencies {
        javaDoclet 'ch.raffael.pegdown-doclet:pegdown-doclet:1.3'

        // Logging
        compile 'org.slf4j:slf4j-api:1.7.25'
        compile 'ch.qos.logback:logback-classic:1.2.3'

        // JUnit
        testCompile 'junit:junit:4.12'
        testCompile 'org.hamcrest:hamcrest-junit:2.0.0.0'
        testCompile 'org.mockito:mockito-core:2.8.47'
        testCompile 'com.github.stefanbirkner:system-rules:1.16.0'
    }

    checkstyle {
        ignoreFailures = true
        configDir = new File("${rootDir}/config/checkstyle")
    }

    findbugs {
        toolVersion = "3.0.1"
        ignoreFailures = true
    }
    
    javadoc {
        outputs.upToDateWhen { false } // ensure the task runs each time, even if no changes to code

        options.windowTitle = 'Cubano'
        options.docTitle = 'Cubano - Test Automation Framework'
        options.overview = 'src/main/javadoc/overview.md'

        // Allows us to use markdown in overview document (and all javadoc comments)
        options.docletpath = configurations.javaDoclet.files.asType(List)
        options.doclet = 'ch.raffael.doclets.pegdown.PegdownDoclet'

        exclude '**/demo/*.*'
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '4.2.1'

        // To download through proxy, need to update <project root>\gradle\wrapper\gradle-wrapper.properties and change 
        //     distributionUrl property from https... to http...
        // and uncomment follow line    
        // distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-bin.zip"
    }

    test {
        exclude '**/demo/*.*'

        // need utf-8 to get text with non-standard chars e.g. apostrophes comparing successfully
        systemProperty 'file.encoding', 'UTF-8'

        // Logback Configuration
        if (System.getProperty('logback.configurationFile') != null) systemProperty 'logback.configurationFile', System.getProperty('logback.configurationFile')

        // Parallel Runner
        if (System.getProperty('concordion.run.threadCount') != null) {
            systemProperty 'concordion.extensions', 'org.concordion.ext.ParallelRunExtension'
            systemProperty 'concordion.run.threadCount', System.getProperty('concordion.run.threadCount')
        }

        systemProperty 'concordion.output.dir', "$reporting.baseDir/spec"
        outputs.upToDateWhen { false } // ensure the tests run each time, even if no changes to test code
        testLogging.showStandardStreams = true
        testLogging.showExceptions = true
    }

    // Publishing
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    
    artifacts {
         archives sourcesJar
    }
    
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
}