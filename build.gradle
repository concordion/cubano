buildscript {
  repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
   }
   dependencies {
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:2.2.+'
        classpath 'io.github.gradle-nexus.publish-plugin:io.github.gradle-nexus.publish-plugin.gradle.plugin:1.1.0'
        classpath 'net.nemerosa.versioning:net.nemerosa.versioning.gradle.plugin:2.14.0'
        classpath 'net.researchgate.release:net.researchgate.release.gradle.plugin:2.8.1'
        classpath 'org.ajoberstar:gradle-git-publish:3.0.0'
        classpath "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.7.1"
    }
}

apply plugin: 'checkstyle'
apply plugin: 'com.github.spotbugs'
apply plugin: 'java-library'
apply plugin: 'nebula-aggregate-javadocs'
apply plugin: io.github.gradlenexus.publishplugin.NexusPublishPlugin
apply plugin: net.nemerosa.versioning.VersioningPlugin
apply plugin: net.researchgate.release.ReleasePlugin
apply plugin: org.ajoberstar.gradle.git.publish.GitPublishPlugin

ext {
    githubUrl = "https://github.com/concordion/${project.name}"
    issuesUrl = "${githubUrl}/issues"
    gitVcsUrl = "${githubUrl}.git"
    gitRepoUri = "git@github.com:concordion/${project.name}.git"
    vcsConnection = "scm:git:git://github.com/concordion/${project.name}.git"

    if (!project.hasProperty("sonatypeUsername")) {
        sonatypeUsername = ''
    }
    if (!project.hasProperty("sonatypePassword")) {
        sonatypePassword = ''
    }
}

group = 'org.concordion'

task publishDocs(dependsOn: ['gitPublishPush'])

gitPublishCopy.dependsOn ':aggregateJavadocs'

nexusPublishing {
    repositories {
        sonatype {
            username = sonatypeUsername
            password = sonatypePassword
        }
    }
}

gitPublish {
    repoUri = 'git@github.com:concordion/cubano.git'
    branch = 'gh-pages'

    contents {
        from(':aggregateJavadocs') {
            into 'api'
        }
    }

    // message used when committing changes
    commitMessage = 'Automatically publishing new Github pages'
}

checkstyle {
    ignoreFailures = true
    configDirectory = new File("${rootDir}/config/checkstyle")
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    checkstyle {
        ignoreFailures = true
    }

    spotbugs {
        ignoreFailures = true
    }

    jar {
	    manifest {
	        attributes  'Specification-Title'   : project.name,
	                'Implementation-Title'  : project.name,
	                'Specification-Version' : project.version.substring(0, project.version.lastIndexOf(".") != -1 ? project.version.lastIndexOf(".") : project.version.length()),
	                'Implementation-Version': project.version,
	                'Implementation-Vendor' : 'concordion.org',
	                'Specification-Vendor'  : 'concordion.org',
	                'Created-By'            : System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')',
	                'Built-With'            : "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
	                'Build-Time'            : String.format("%tFT%<tRZ", Calendar.getInstance(TimeZone.getTimeZone("Z"))),
                    'Build-Revision'        : versioning.info.commit,
	                'Build-OS'              : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
	    }
	}
    // need utf-8 to get text with non-standard chars e.g. curly apostrophes used correctly 
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    
    repositories {
    	mavenCentral()
    }

    configurations {
        javaDoclet
    }

    dependencies {
        javaDoclet 'ch.raffael.pegdown-doclet:pegdown-doclet:1.3'

        // Logging
        api 'org.slf4j:slf4j-api:1.7.25'
        api 'ch.qos.logback:logback-classic:1.2.3'

        // JUnit
        testImplementation 'junit:junit:4.13.2'
        testImplementation 'org.hamcrest:hamcrest:2.2'
        testImplementation 'org.hamcrest:hamcrest-library:2.2'
        testImplementation 'org.mockito:mockito-core:3.11.2'
        testImplementation 'com.github.stefanbirkner:system-rules:1.19.0'
    }

    javadoc {
        outputs.upToDateWhen { false } // ensure the task runs each time, even if no changes to code

        options.windowTitle = 'Cubano'
        options.docTitle = 'Cubano - Test Automation Framework'
        options.overview = 'src/main/javadoc/overview.md'

        // Allows us to use markdown in overview document (and all javadoc comments)
        options.docletpath = configurations.javaDoclet.files.asType(List)
        options.doclet = 'ch.raffael.doclets.pegdown.PegdownDoclet'

        exclude '**/demo/*.*'
    }

    test {
        exclude '**/demo/*.*'

        // need utf-8 to get text with non-standard chars e.g. apostrophes comparing successfully
        systemProperty 'file.encoding', 'UTF-8'

        // Logback Configuration
        if (System.getProperty('logback.configurationFile') != null) systemProperty 'logback.configurationFile', System.getProperty('logback.configurationFile')

        // Parallel Runner
        if (System.getProperty('concordion.run.threadCount') != null) {
            systemProperty 'concordion.extensions', 'org.concordion.ext.ParallelRunExtension'
            systemProperty 'concordion.run.threadCount', System.getProperty('concordion.run.threadCount')
        }

        systemProperty 'concordion.output.dir', "$reporting.baseDir/spec"
        outputs.upToDateWhen { false } // ensure the tests run each time, even if no changes to test code
        testLogging.showStandardStreams = true
        testLogging.showExceptions = true
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                pom.withXml {
                    asNode().children().last() + {
                        resolveStrategy = Closure.DELEGATE_FIRST

                        name project.name
                        description project.description
                        url 'https://concordion.org/cubano'
                        packaging 'jar'
                        inceptionYear '2017'

                        scm {
                            url gitVcsUrl
                            connection vcsConnection
                            developerConnection vcsConnection
                        }

                        licenses {
                            license {
                                name 'The Apache Software License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.html'
                                distribution 'repo'
                            }
                        }

                        issueManagement {
                            system 'GitHub Issues'
                            url issuesUrl
                        }

                        developers {
                            developer {
                                id 'andrew-sumner'
                                name 'Andrew Sumner'
                                roles { role 'Project Creator' }
                            }
                            developer {
                                id 'nigelcharman'
                                name 'Nigel Charman'
                                roles { role 'Developer' }
                            }
                            developer {
                                id 'jimmykemp'
                                name 'Jimmy Kemp'
                                roles { role 'Developer' }
                            }
                        }
                    }
                    asNode().dependencies.'*'.findAll() {
                        it.scope.text() == 'runtime' && project.configurations.implementation.allDependencies.find { dep ->
                            dep.name == it.artifactId.text()
                        }
                    }.each() {
                        it.scope*.value = 'compile'
                    }
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }
}