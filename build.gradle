buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'net.researchgate:gradle-release:2.6.0'
        classpath 'org.ajoberstar:gradle-git-publish:0.3.2'
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:2.2.+'
        classpath 'net.nemerosa:versioning:2.7.1'
    }
}

apply plugin: 'nebula-aggregate-javadocs'
apply plugin: 'org.ajoberstar.git-publish'
apply plugin: 'net.researchgate.release'
apply plugin: 'net.nemerosa.versioning'

ext {
    githubUrl = "https://github.com/concordion/${project.name}"
    issuesUrl = "${githubUrl}/issues"
    gitVcsUrl = "${githubUrl}.git"
    gitRepoUri = "git@github.com:concordion/${project.name}.git"
    vcsConnection = "scm:git:git://github.com/concordion/${project.name}.git"

    if (!project.hasProperty("bintrayUsername")) {
        bintrayUsername = ''
    }
    if (!project.hasProperty("bintrayApiKey")) {
        bintrayApiKey = ''
    }
    if (!project.hasProperty("bintrayPassphrase")) {
        bintrayPassphrase = ''
    }
    if (!project.hasProperty("sonatypeUsername")) {
        sonatypeUsername = ''
    }
    if (!project.hasProperty("sonatypePassword")) {
        sonatypePassword = ''
    }
}

group = 'org.concordion'

task build {
    dependsOn subprojects*.tasks*.findByName('build').minus(null)
}

task publishDocs(dependsOn: ['gitPublishPush'])

gitPublishCopy.dependsOn ':aggregateJavadocs'

gitPublish {
    repoUri = 'git@github.com:concordion/cubano.git'
    branch = 'gh-pages'

    contents {
        from(':aggregateJavadocs') {
            into 'api'
        }
    }

    // message used when committing changes
    commitMessage = 'Automatically publishing new Github pages'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4.1'

    // To download through proxy, need to update <project root>\gradle\wrapper\gradle-wrapper.properties and change
    //     distributionUrl property from https... to http...
    // and uncomment follow line
    // distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-bin.zip"
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'findbugs'
    apply plugin: 'checkstyle'
    apply plugin: 'eclipse'
    apply plugin: 'jacoco'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: com.jfrog.bintray.gradle.BintrayPlugin


	jar {
	    manifest {
	        attributes  'Specification-Title'   : project.name,
	                'Implementation-Title'  : project.name,
	                'Specification-Version' : version.substring(0, version.lastIndexOf(".") != -1 ? version.lastIndexOf(".") : version.length()),
	                'Implementation-Version': version,
	                'Implementation-Vendor' : 'concordion.org',
	                'Specification-Vendor'  : 'concordion.org',
	                'Created-By'            : System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')',
	                'Built-With'            : "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
	                'Build-Time'            : String.format("%tFT%<tRZ", Calendar.getInstance(TimeZone.getTimeZone("Z"))),
	                'Build-Revision'        : versioning.info.commit,
	                'Build-OS'              : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
	    }
	}
    // need utf-8 to get text with non-standard chars e.g. curly apostrophes used correctly 
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    // This is a work around for an outstanding issue getting eclipse plugin to honour encoding options for java
    // https://issues.gradle.org/browse/GRADLE-2274
    eclipse {
        File f = file('.settings')

        if (f.exists()) {
            f = file('.settings/org.eclipse.core.resources.prefs')
            f.write('eclipse.preferences.version=1\n')
            f.append('encoding/<project>=UTF-8')
        }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    
    repositories {
        mavenCentral()
    }

    configurations {
        javaDoclet
    }

    // A number of libraries we are using include selenium as a dependecy, use this to check
    // gradlew dependencyInsight  --dependency org.seleniumhq.selenium:selenium-java --configuration testCompile
    // Enable this to confirm:
    /*
    configurations.all {
        resolutionStrategy {
            // fail eagerly on version conflict (includes transitive dependencies)
            // e.g. multiple different versions of the same dependency (group and name are equal)
            failOnVersionConflict()
        }
    }
    */
    
    dependencies {
        javaDoclet 'ch.raffael.pegdown-doclet:pegdown-doclet:1.3'

        // Logging
        compile 'org.slf4j:slf4j-api:1.7.25'
        compile 'ch.qos.logback:logback-classic:1.2.3'

        // JUnit
        testCompile 'junit:junit:4.12'
        testCompile 'org.hamcrest:hamcrest-junit:2.0.0.0'
        testCompile 'org.mockito:mockito-core:2.8.47'
        testCompile 'com.github.stefanbirkner:system-rules:1.16.0'
    }

    checkstyle {
        ignoreFailures = true
        configDir = new File("${rootDir}/config/checkstyle")
    }

    findbugs {
        toolVersion = "3.0.1"
        ignoreFailures = true
    }
    
    javadoc {
        outputs.upToDateWhen { false } // ensure the task runs each time, even if no changes to code

        options.windowTitle = 'Cubano'
        options.docTitle = 'Cubano - Test Automation Framework'
        options.overview = 'src/main/javadoc/overview.md'

        // Allows us to use markdown in overview document (and all javadoc comments)
        options.docletpath = configurations.javaDoclet.files.asType(List)
        options.doclet = 'ch.raffael.doclets.pegdown.PegdownDoclet'

        exclude '**/demo/*.*'
    }

    test {
        exclude '**/demo/*.*'

        // need utf-8 to get text with non-standard chars e.g. apostrophes comparing successfully
        systemProperty 'file.encoding', 'UTF-8'

        // Logback Configuration
        if (System.getProperty('logback.configurationFile') != null) systemProperty 'logback.configurationFile', System.getProperty('logback.configurationFile')

        // Parallel Runner
        if (System.getProperty('concordion.run.threadCount') != null) {
            systemProperty 'concordion.extensions', 'org.concordion.ext.ParallelRunExtension'
            systemProperty 'concordion.run.threadCount', System.getProperty('concordion.run.threadCount')
        }

        systemProperty 'concordion.output.dir', "$reporting.baseDir/spec"
        outputs.upToDateWhen { false } // ensure the tests run each time, even if no changes to test code
        testLogging.showStandardStreams = true
        testLogging.showExceptions = true
    }

    // Publishing
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    
    artifacts {
         archives sourcesJar
    }
    
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task publishSnapshot(dependsOn: ['test', 'publishMainPublicationToMavenRepository'])

    publishing {
        repositories {
            maven {
                if (project.version.endsWith('-SNAPSHOT')) {
                    url "http://oss.jfrog.org/artifactory/simple/oss-snapshot-local/"
                    credentials {
                        username bintrayUsername
                        password bintrayApiKey
                    }
                }
            }
        }
    }

    publishing {
        publications {
            main(MavenPublication) {
                artifact sourcesJar {
                    classifier "sources"
                }

                artifact javadocJar {
                    classifier "javadoc"
                }

                from components.java

                pom.withXml {
                    asNode().children().last() + {
                        resolveStrategy = Closure.DELEGATE_FIRST

                        name project.name
                        description project.description
                        url 'http://www.concordion.org/cubano'
                        packaging 'jar'
                        inceptionYear '2017'

                        scm {
                            url gitVcsUrl
                            connection vcsConnection
                            developerConnection vcsConnection
                        }

                        licenses {
                            license {
                                name 'The Apache Software License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.html'
                                distribution 'repo'
                            }
                        }

                        issueManagement {
                            system 'GitHub Issues'
                            url issuesUrl
                        }

                        developers {
                            developer {
                                id 'andrew-sumner'
                                name 'Andrew Sumner'
                                roles { role 'Project Creator' }
                            }
                            developer {
                                id 'nigelcharman'
                                name 'Nigel Charman'
                                roles { role 'Developer' }
                            }
                            developer {
                                id 'jimmykemp'
                                name 'Jimmy Kemp'
                                roles { role 'Developer' }
                            }
                        }
                    }
                    asNode().dependencies.'*'.findAll() {
                        it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                            dep.name == it.artifactId.text()
                        }
                    }.each() {
                        it.scope*.value = 'compile'
                    }
                }
            }
        }
    }

    bintray {
        user = bintrayUsername   // set this in your ~/.gradle/gradle.properties file
        key = bintrayApiKey         // set this in your ~/.gradle/gradle.properties file
        publications = ['main'] // see publications closure
//        dryRun = true
        publish = true
        pkg {
            repo = 'maven'
            userOrg = 'concordion'
            name = project.name
            desc = project.description
            licenses = ['Apache-2.0']
            issueTrackerUrl = issuesUrl
            vcsUrl = gitVcsUrl
            websiteUrl = 'http://concordion.org/cubano'
            version {
                name = project.version
                released = new Date()
                vcsTag = project.version
                gpg {
                    sign = true
                    passphrase = bintrayPassphrase // set this in your ~/.gradle/gradle.properties file
                }
                mavenCentralSync {
                    sync = true
                    user = sonatypeUsername              // set this in your ~/.gradle/gradle.properties file
                    password = sonatypePassword          // OSS user password// set this in your ~/.gradle/gradle.properties file
                    close = '1'
               }
            }
        }
    }
}